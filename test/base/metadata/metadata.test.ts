/// <reference path="../../../typings/index.d.ts" />
/**
 * Created by helmut on 23.07.16.
 */

//import expect = require("chai").expect;
import chai = require("chai");
import {expect} from "chai";
import {assert} from "chai";
import {should} from "chai";
import {LoopbackModelClass} from "../../lib/types/loopbacktypes";
import lb_constants = require("../../lib/constants/loopback_constants");
import {Request} from "express-serve-static-core";
import {Response} from "express-serve-static-core";
import {Metadata} from "../../../lib/base/metadata/metadata";
import {LoopbadkApp} from "../../../lib/types/loopbacktypes";
import chaiAsPromised = require("chai-as-promised");

/* see here for a good description of chai-as-promised: http://www.sitepoint.com/promises-in-javascript-unit-tests-the-definitive-guide/ */

describe("Metadata", function() {
	before(function () {
		chai.use(chaiAsPromised);
		chai.should();	// found this hack on the internet, otherwise tests with should fail
	});


	describe("buildMetadata", function () {
		let sut:Metadata;

		beforeEach(function () {
		});

		it("should build and return an empty metadata stream", function () {
			let models = () => {return []};
			let app:LoopbadkApp = {models: models};
			sut = new Metadata(app);

			// !!! It's important that this string is EXACTLY the same as the one that is generated by n-odata-server
			// Don't delete or add whitespace !!!
			let expectedString = `<?xml version="1.0" encoding="UTF-8"?>
<edmx:Edmx xmlns:edmx="http://schemas.microsoft.com/ado/2007/06/edmx" xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata" Version="1.0">
  <edmx:DataServices m:DataServiceVersion="2.0">
    <Schema xmlns="http://schemas.microsoft.com/ado/2008/09/edm" Namespace="NODATASERVER">
      <EntityType/>
      <Association/>
      <EntityContainer Name="NODATASERVER" m:IsDefaultEntityContainer="true">
        <EntitySet/>
        <AssociationSet/>
      </EntityContainer>
    </Schema>
  </edmx:DataServices>
</edmx:Edmx>`;
			let promise:Promise<any> = sut.buildMetadata();
			return promise.should.eventually.equal(expectedString);
			});

		it("should build and return a simple metadata stream", function () {
			/*
			let simpleModel:LoopbackModelClass;
			simpleModel = {
				definition: {
					name: "MyModel",
					columnNames: function() {
						return ["MyProp1", "MyProp2"] as Array<string>
					},
					properties: {
						MyProp1: {
							id: "MyProp1"
						},
						MyProp2: {
							id: "MyProp2"
						}
					}
				}
			} as LoopbackModelClass;

			let models = () => {return [simpleModel]};
			let app:LoopbadkApp = {models: models};
			sut = new Metadata(app);

			// !!! It's important that this string is EXACTLY the same as the one that is generated by n-odata-server
			// Don't delete or add whitespace !!!
			let expectedString = `<?xml version="1.0" encoding="UTF-8"?>
<edmx:Edmx xmlns:edmx="http://schemas.microsoft.com/ado/2007/06/edmx" xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata" Version="1.0">
  <edmx:DataServices m:DataServiceVersion="2.0">
    <Schema xmlns="http://schemas.microsoft.com/ado/2008/09/edm" Namespace="NODATASERVER">
      <EntityType/>
      <Association/>
      <EntityContainer Name="NODATASERVER" m:IsDefaultEntityContainer="true">
        <EntitySet/>
        <AssociationSet/>
      </EntityContainer>
    </Schema>
  </edmx:DataServices>
</edmx:Edmx>`;
			let promise:Promise<any> = sut.buildMetadata();
			return promise.should.eventually.equal(expectedString);
			*/
		});

		});
});
